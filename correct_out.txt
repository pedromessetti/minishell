----- TESTS FOR LEXICAL ANALYSIS -----
cat < Makefile | ls -l | grep inc | echo 'how are you?' > file.txt | exit
token_count: 18
token[0] | type: 0 | content: cat
token[1] | type: 1 | content: <
token[2] | type: 6 | content: Makefile
token[3] | type: 1 | content: |
token[4] | type: 0 | content: ls
token[5] | type: 4 | content: -l
token[6] | type: 1 | content: |
token[7] | type: 0 | content: grep
token[8] | type: 4 | content: inc
token[9] | type: 1 | content: |
token[10] | type: 5 | content: echo
token[11] | type: 2 | content: 'how
token[12] | type: 2 | content: are
token[13] | type: 2 | content: you?'
token[14] | type: 1 | content: >
token[15] | type: 6 | content: file.txt
token[16] | type: 1 | content: |
token[17] | type: 5 | content: exit

cd | export | unset | echo | env | pwd
token_count: 11
token[0] | type: 5 | content: cd
token[1] | type: 1 | content: |
token[2] | type: 5 | content: export
token[3] | type: 1 | content: |
token[4] | type: 5 | content: unset
token[5] | type: 1 | content: |
token[6] | type: 5 | content: echo
token[7] | type: 1 | content: |
token[8] | type: 5 | content: env
token[9] | type: 1 | content: |
token[10] | type: 5 | content: pwd

$PATH | $HOME | $SHELL
token_count: 5
token[0] | type: 3 | content: $PATH
token[1] | type: 1 | content: |
token[2] | type: 3 | content: $HOME
token[3] | type: 1 | content: |
token[4] | type: 3 | content: $SHELL

@invalid
token_count: 1
token[0] | type: -1 | content: @invalid

|invalid|
token_count: 1
token[0] | type: -1 | content: |invalid|

< /libft/inc/libt.h
token_count: 2
token[0] | type: 1 | content: <
token[1] | type: 6 | content: /libft/inc/libt.h

cat < Makefile
token_count: 3
token[0] | type: 0 | content: cat
token[1] | type: 1 | content: <
token[2] | type: 6 | content: Makefile

123 | abc | 456
token_count: 5
token[0] | type: 0 | content: 123
token[1] | type: 1 | content: |
token[2] | type: 0 | content: abc
token[3] | type: 1 | content: |
token[4] | type: 0 | content: 456
